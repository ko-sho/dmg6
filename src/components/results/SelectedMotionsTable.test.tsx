import { render, screen } from "@testing-library/react";
import SelectedMotionsTable from "./SelectedMotionsTable";

describe("SelectedMotionsTable", () => {
  const motions: import("../../models/FullDataMotion").FullDataMotion[] = [
    {
      name: "A",
      enName: "A",
      RSID: 1,
      RSName: "",
      colName: "",
      DamageTypeFixed: "斬",
      DamageTypeCustom: "",
      DamageAngleFixed: "",
      DamageAngleOffsetDeg: 0,
      Attack: 10,
      FixAttack: 0,
      GuardType: "",
      VersusGuardPower: 0,
      StageDamageTypeFixed: "",
      StageDamageExIDFixed: "",
      AttackAttrFixed: "",
      AttrLevel: 0,
      AttrValue: 1,
      AttackCond: "",
      IsForceCond: false,
      CondValue: 0,
      IsUseCondDefaultSec: false,
      CondCustomSec: 0,
      StunDamage: 0,
      FlagBit: "0",
      MultiHitTimer: 0,
      HealValue: 0,
      PriorityFixed: "0",
      PriorityTypeFixed: "",
      DisableContactPointAdjust: false,
      IsContactPointAdjustIgnoreDamageAngle: false,
      PorterDodgeFixed: "",
      ActionTypeFixed: "",
      PartsBreakRate: 0,
      ParryDamage: 0,
      RideDamage: 0,
      BattleRidingAttackType: "",
      RidingScarDamage: 0,
      key: "0",
      RidingSuccessDamageRawScar: 0,
      IsSkillHien: false,
      IsPointAttack: false,
      IsPrePointHitReaction: false,
      TearScarCreateRate: 0,
      TearScarDamageRate: 0,
      RawScarDamageRate: 0,
      OldScarDamageRate: 0,
      IsScarForceChange: false,
      IsRawScarForce: false,
      IsRawScarLimit: false,
      IsWeakPointLimit: false,
      NoDamageReaction: false,
      IsMultiHitEmParts: false,
      MultiHitEmPartsMaxNum: 1,
      IsMultiHitEmWeak: false,
      MultiHitEmWeakMaxNum: 0,
      MultiHitRateCurve: "",
      IsLaserGuardCounter: false,
      IsWpPhysicalAttack: false,
      IsNoUseKireaji: false,
      IsForceUseKireajiAttackRate: false,
      IsCustomKireajiReduce: false,
      CustomKireajiReduce: 0,
      UseStatusAttackPower: false,
      UseStatusAttrPower: false,
      StatusAttrRate: 0,
      StatusConditionRate: 0,
      UseSkillAdditionalDamage: false,
      UseSkillContinuousAttack: false,
      MultiHitStatusRateCurve: "",
      IsNoCritical: false,
      IsCustomShockAbsorberRate: false,
      CustomShockAbsorberRate: 0,
      IsGestureAttack: false,
      HitEffectTypeFixed: "",
      DisableHitEffect: "false",
      HitEffectAngleZ: 0,
      HitEffectAngleX: 0,
      HitEffectOverwriteConnectID: 0,
      GeneralValue1: 0,
      GeneralValue2: 0,
      GeneralValue3: 0,
      FriendDamageTypeFixed: "",
      IsSensor: false,
      CameraShakeGuid: "",
      IsEnableMotSeqCameraShake: false,
      IgnoreRecoil: false,
      HitStopType: "",
      HitStopIgnoreResponse: false,
      RSKName: "",
      colShapeName: "",
      GroupIndex: 0,
      GName: "",
      GLayerIndex: 0,
      GShapeNames: "",
      GJointNames1: "",
      GJointNames2: "",
      GShapeTypes: "",
      GShapeParams: "",
    },
    {
      name: "B",
      enName: "B",
      RSID: 2,
      RSName: "",
      colName: "",
      DamageTypeFixed: "斬",
      DamageTypeCustom: "",
      DamageAngleFixed: "",
      DamageAngleOffsetDeg: 0,
      Attack: 20,
      FixAttack: 0,
      GuardType: "",
      VersusGuardPower: 0,
      StageDamageTypeFixed: "",
      StageDamageExIDFixed: "",
      AttackAttrFixed: "",
      AttrLevel: 0,
      AttrValue: 1,
      AttackCond: "",
      IsForceCond: false,
      CondValue: 0,
      IsUseCondDefaultSec: false,
      CondCustomSec: 0,
      StunDamage: 0,
      FlagBit: "0",
      MultiHitTimer: 0,
      HealValue: 0,
      PriorityFixed: "0",
      PriorityTypeFixed: "",
      DisableContactPointAdjust: false,
      IsContactPointAdjustIgnoreDamageAngle: false,
      PorterDodgeFixed: "",
      ActionTypeFixed: "",
      PartsBreakRate: 0,
      ParryDamage: 0,
      RideDamage: 0,
      BattleRidingAttackType: "",
      RidingScarDamage: 0,
      key: "0",
      RidingSuccessDamageRawScar: 0,
      IsSkillHien: false,
      IsPointAttack: false,
      IsPrePointHitReaction: false,
      TearScarCreateRate: 0,
      TearScarDamageRate: 0,
      RawScarDamageRate: 0,
      OldScarDamageRate: 0,
      IsScarForceChange: false,
      IsRawScarForce: false,
      IsRawScarLimit: false,
      IsWeakPointLimit: false,
      NoDamageReaction: false,
      IsMultiHitEmParts: false,
      MultiHitEmPartsMaxNum: 1,
      IsMultiHitEmWeak: false,
      MultiHitEmWeakMaxNum: 0,
      MultiHitRateCurve: "",
      IsLaserGuardCounter: false,
      IsWpPhysicalAttack: false,
      IsNoUseKireaji: false,
      IsForceUseKireajiAttackRate: false,
      IsCustomKireajiReduce: false,
      CustomKireajiReduce: 0,
      UseStatusAttackPower: false,
      UseStatusAttrPower: false,
      StatusAttrRate: 0,
      StatusConditionRate: 0,
      UseSkillAdditionalDamage: false,
      UseSkillContinuousAttack: false,
      MultiHitStatusRateCurve: "",
      IsNoCritical: false,
      IsCustomShockAbsorberRate: false,
      CustomShockAbsorberRate: 0,
      IsGestureAttack: false,
      HitEffectTypeFixed: "",
      DisableHitEffect: "false",
      HitEffectAngleZ: 0,
      HitEffectAngleX: 0,
      HitEffectOverwriteConnectID: 0,
      GeneralValue1: 0,
      GeneralValue2: 0,
      GeneralValue3: 0,
      FriendDamageTypeFixed: "",
      IsSensor: false,
      CameraShakeGuid: "",
      IsEnableMotSeqCameraShake: false,
      IgnoreRecoil: false,
      HitStopType: "",
      HitStopIgnoreResponse: false,
      RSKName: "",
      colShapeName: "",
      GroupIndex: 0,
      GName: "",
      GLayerIndex: 0,
      GShapeNames: "",
      GJointNames1: "",
      GJointNames2: "",
      GShapeTypes: "",
      GShapeParams: "",
    },
  ];
  it("選択中モーションがテーブルに表示される", () => {
    render(<SelectedMotionsTable motions={motions} />);
    expect(screen.getByText("A")).toBeInTheDocument();
    expect(screen.getByText("B")).toBeInTheDocument();
  });
  it("空配列でも落ちない", () => {
    const { container } = render(<SelectedMotionsTable motions={[]} />);
    // tbodyが空であることを検証
    const tbody = container.querySelector("tbody");
    expect(tbody).toBeTruthy();
    expect(tbody?.children.length).toBe(0);
  });
});

export {};
